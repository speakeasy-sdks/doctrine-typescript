/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "../sdk/models/operations";
import { Chat } from "./chat";
import { Document } from "./document";
import { Ingest } from "./ingest";
import { Partition } from "./partition";
import { Query } from "./query";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse, RawAxiosRequestHeaders } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://localhost"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "2.1.0";
    genVersion = "2.213.3";
    userAgent = "speakeasy-sdk/typescript 2.1.0 2.213.3 1.0.0 Doctrine";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

export class Doctrine {
    public chat: Chat;
    public document: Document;
    public ingest: Ingest;
    public partition: Partition;
    public query: Query;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.chat = new Chat(this.sdkConfiguration);
        this.document = new Document(this.sdkConfiguration);
        this.ingest = new Ingest(this.sdkConfiguration);
        this.partition = new Partition(this.sdkConfiguration);
        this.query = new Query(this.sdkConfiguration);
    }

    /**
     * http://localhost:3000/api/scanPageContent
     *
     * @remarks
     * http://localhost:3000/api/scanPageContent
     */
    async httpLocalhost3000ApiScanpagecontent(
        req: operations.HttpLocalhost3000ApiScanpagecontentRequestBody,
        config?: AxiosRequestConfig
    ): Promise<operations.HttpLocalhost3000ApiScanpagecontentResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.HttpLocalhost3000ApiScanpagecontentRequestBody(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/api/scanPageContent";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "*/*";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.HttpLocalhost3000ApiScanpagecontentResponse =
            new operations.HttpLocalhost3000ApiScanpagecontentResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                break;
        }

        return res;
    }

    /**
     * http://localhost:3000/api/scanSitemap
     *
     * @remarks
     * http://localhost:3000/api/scanSitemap
     */
    async httpLocalhost3000ApiScansitemap(
        req: operations.HttpLocalhost3000ApiScansitemapRequestBody,
        config?: AxiosRequestConfig
    ): Promise<operations.HttpLocalhost3000ApiScansitemapResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.HttpLocalhost3000ApiScansitemapRequestBody(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/api/scanSitemap";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "*/*";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const responseContentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.HttpLocalhost3000ApiScansitemapResponse =
            new operations.HttpLocalhost3000ApiScansitemapResponse({
                statusCode: httpRes.status,
                contentType: responseContentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                break;
        }

        return res;
    }
}
